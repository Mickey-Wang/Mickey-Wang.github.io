{"title":"关于树形插件展示中数据结构转换的算法","date":"2017-06-02T16:00:00.000Z","author":"Mikey","excerpt":"","slug":"关于树形插件展示中数据结构转换的算法","comments":true,"tags":["JavaScript","算法"],"categories":["技术博客"],"updated":"2019-01-28T06:35:12.419Z","content":"<h2 id=\"问题背景\"><a href=\"#问题背景\" class=\"headerlink\" title=\"问题背景\"></a>问题背景</h2><p>在一些目录结构、机构层级等展示的场景中，我们经常会用到一些成熟的树形插件来进行轻松展示，比如ztree等。大多数插件会支持对两种数据源格式的解析，一种是通用的二维数据结构，一种是树状数据结构。对于这两种数据结构的称呼在各插件中可能不尽相同，这里依照二维结构和树状结构来称呼。举例说明如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 二维数据结构</span></span><br><span class=\"line\">[&#123;</span><br><span class=\"line\">  <span class=\"string\">\"id\"</span>: <span class=\"string\">\"001\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"总部\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"parentId\"</span>: <span class=\"string\">\"0\"</span></span><br><span class=\"line\">&#125;, &#123;</span><br><span class=\"line\">  <span class=\"string\">\"id\"</span>: <span class=\"string\">\"002\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"二级门店1\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"parentId\"</span>: <span class=\"string\">\"001\"</span></span><br><span class=\"line\">&#125;, &#123;</span><br><span class=\"line\">  <span class=\"string\">\"id\"</span>: <span class=\"string\">\"003\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"三级门店\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"parentId\"</span>: <span class=\"string\">\"002\"</span></span><br><span class=\"line\">&#125;, &#123;</span><br><span class=\"line\">  <span class=\"string\">\"id\"</span>: <span class=\"string\">\"004\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"二级门店2\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"parentId\"</span>: <span class=\"string\">\"001\"</span></span><br><span class=\"line\">&#125;]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 树状数据结构</span></span><br><span class=\"line\">[&#123;</span><br><span class=\"line\">    <span class=\"string\">\"id\"</span>: <span class=\"string\">\"001\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"总部\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"parentId\"</span>: <span class=\"string\">\"0\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"children\"</span>: [&#123;</span><br><span class=\"line\">      <span class=\"string\">\"id\"</span>: <span class=\"string\">\"002\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"name\"</span>: <span class=\"string\">\"二级门店1\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"parentId\"</span>: <span class=\"string\">\"001\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"children\"</span>: [&#123;</span><br><span class=\"line\">        <span class=\"string\">\"id\"</span>: <span class=\"string\">\"003\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"name\"</span>: <span class=\"string\">\"三级门店\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"parentId\"</span>: <span class=\"string\">\"002\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"children\"</span>: []</span><br><span class=\"line\">      &#125;]</span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">      <span class=\"string\">\"id\"</span>: <span class=\"string\">\"004\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"name\"</span>: <span class=\"string\">\"二级门店2\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"parentId\"</span>: <span class=\"string\">\"001\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"children\"</span>: []</span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">&#125;]</span><br></pre></td></tr></table></figure>\n<p>但在某些插件中，或在某些特殊场景中，我们有两种数据结构之间相互转换的需求，需要自己写一个辅助函数来完成。这里就提供两个这样的工具函数来完成数据结构的转换。</p>\n<p><strong>Note:</strong> 要说明的是，工具函数没有经过大数据量转换测试，所以对有实时性、大量源数据转换需求的同学而言，请自行测试分析，可采取前置或异步等方案处理。由于自身技术水平的局限性，算法本身会有性能优化的空间，若有更优处理算法，还望交流分享，谢谢！<i class=\"icon-smile\"></i></p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><p>我们来分开介绍两种数据结构之间的转换算法，每个小结中我会先贴出整个函数的代码清单，以便大家复制粘贴，然后会简要说明其中大概的逻辑思路。</p>\n<h3 id=\"二维数据结构-gt-树状数据结构\"><a href=\"#二维数据结构-gt-树状数据结构\" class=\"headerlink\" title=\"二维数据结构 =&gt; 树状数据结构\"></a>二维数据结构 =&gt; 树状数据结构</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 将通用的二维数据结构转换为树状数据结构</span></span><br><span class=\"line\"><span class=\"comment\"> * @param  &#123;String&#125; rootParentIdValue 表示根节点的父类id值</span></span><br><span class=\"line\"><span class=\"comment\"> * @param  &#123;String&#125; parentIdName      表示父类id的节点名称</span></span><br><span class=\"line\"><span class=\"comment\"> * @param  &#123;String&#125; nodeIdName        表示二维结构中，每个对象主键的名称</span></span><br><span class=\"line\"><span class=\"comment\"> * @param  &#123;Array&#125; listData           为二维结构的数据</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;Array&#125;                    转换后的tree结构数据</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">listToTree</span>(<span class=\"params\">rootParentIdValue, parentIdName, nodeIdName, listData</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (listData <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span> &amp;&amp; listData.length &gt; <span class=\"number\">0</span> &amp;&amp; listData[<span class=\"number\">0</span>][parentIdName]) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> rootList = [],</span><br><span class=\"line\">        nodeList = []</span><br><span class=\"line\">      </span><br><span class=\"line\">    listData.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">node, index</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (node[parentIdName] == rootParentIdValue) &#123;</span><br><span class=\"line\">        rootList.push(node);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        nodeList.push(node);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nodeList.length &gt; <span class=\"number\">0</span> &amp;&amp; rootList.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      childrenNodeAdd(rootList, nodeList);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> rootList;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rootList.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"没有对应的子节点集合\"</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"没有对应的父类节点集合\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">childrenNodeAdd</span>(<span class=\"params\">rootNodeList, childrenList</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (childrenList.length &gt; <span class=\"number\">0</span>) &#123; </span><br><span class=\"line\">        rootNodeList.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">rootNode</span>) </span>&#123;</span><br><span class=\"line\">          rootNode[<span class=\"string\">\"children\"</span>] = [];</span><br><span class=\"line\">          <span class=\"keyword\">var</span> childrenNodeList = childrenList.slice(<span class=\"number\">0</span>); </span><br><span class=\"line\">          childrenList.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">childrenNode, childrenIndex</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (parentIdName <span class=\"keyword\">in</span> childrenNode &amp;&amp; rootNode[nodeIdName] == childrenNode[parentIdName]) &#123;</span><br><span class=\"line\">              rootNode[<span class=\"string\">\"children\"</span>].push(childrenNode);</span><br><span class=\"line\">              childrenNodeList.splice(childrenIndex, <span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">          childrenNodeAdd(rootNode[<span class=\"string\">\"children\"</span>], childrenNodeList);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"格式不正确，无法转换\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此函数可通过<code>listToTree(&quot;0&quot;, &quot;parentId&quot;, &quot;id&quot;, sourceData)</code>调用测试，<code>sourceData</code>为文章开头给出的二维数据结构举例。</p>\n<p>下面简要介绍一下其中逻辑，第10行是简要验证一下入参数据的合法性，然后声明了rootList和nodeList两个变量。其中rootList为顶级根节点，nodeList为其他子节点集合，第14行到20行的循环便是为两个变量赋值，之后根据两个变量的值进一步判断数据的合法性。在验证之后调用childrenNodeAdd这个内部函数，此函数之后将会被递归调用，为每一个节点添加指定名称为“children”的子节点数组。两个入参分别是rootNodeList和childrenList，代表父节点集合，和其之后的所有子节点集合。在23行第一次调用时，传入的便是顶级根节点和其之后的所有子孙节点。下面看这段带有详细注解的代码片段：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">childrenNodeAdd</span>(<span class=\"params\">rootNodeList, childrenList</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (childrenList.length &gt; <span class=\"number\">0</span>) &#123; <span class=\"comment\">//  如果没有子节点了就结束递归</span></span><br><span class=\"line\">        <span class=\"comment\">//遍历父节点集合，在子节点中查找其自身的子节点，并添加到对应的子节点数组中</span></span><br><span class=\"line\">        rootNodeList.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">rootNode</span>) </span>&#123;</span><br><span class=\"line\">          rootNode[<span class=\"string\">\"children\"</span>] = [];</span><br><span class=\"line\">          <span class=\"keyword\">var</span> childrenNodeList = childrenList.slice(<span class=\"number\">0</span>); <span class=\"comment\">//复制一个子节点数据，用于存放剩余的子节点</span></span><br><span class=\"line\">          <span class=\"comment\">//遍历所有子节点</span></span><br><span class=\"line\">          childrenList.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">childrenNode, childrenIndex</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (parentIdName <span class=\"keyword\">in</span> childrenNode &amp;&amp; rootNode[nodeIdName] == childrenNode[parentIdName]) &#123; <span class=\"comment\">//根节点的id 等于子节点的父类id</span></span><br><span class=\"line\">              rootNode[<span class=\"string\">\"children\"</span>].push(childrenNode); <span class=\"comment\">//添加对应节点归为子节点</span></span><br><span class=\"line\">              childrenNodeList.splice(childrenIndex, <span class=\"number\">1</span>);<span class=\"comment\">//在剩余子节点中剔除已经分配过的子节点</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">          childrenNodeAdd(rootNode[<span class=\"string\">\"children\"</span>], childrenNodeList); <span class=\"comment\">//剩余子节点继续递归执行，每次递归一次就表示节点增加一级。</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"树状数据结构-gt-二维数据结构\"><a href=\"#树状数据结构-gt-二维数据结构\" class=\"headerlink\" title=\"树状数据结构 =&gt; 二维数据结构\"></a>树状数据结构 =&gt; 二维数据结构</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 将树状数据结构转换为二维数据结构</span></span><br><span class=\"line\"><span class=\"comment\"> * @param  &#123;String&#125; childrenName 树状结构中子节点名称</span></span><br><span class=\"line\"><span class=\"comment\"> * @param  &#123;Array&#125; treeData     树状结构数据</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;Array&#125;              转换后的通用二维结构数据</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">treeToList</span>(<span class=\"params\">childrenName, treeData</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> listData = [];</span><br><span class=\"line\">  transferTreeData(treeData);</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">transferTreeData</span> (<span class=\"params\">sourceData</span>) </span>&#123;</span><br><span class=\"line\">     sourceData.forEach( <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">node, nodeIndex</span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span>(node[childrenName].length &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">          transferTreeData(node[childrenName]);</span><br><span class=\"line\">      <span class=\"keyword\">delete</span> node[childrenName];</span><br><span class=\"line\">      listData.push(node);</span><br><span class=\"line\">     &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> listData;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此函数可通过<code>treeToList(&quot;children&quot;, sourceData)</code>调用测试，<code>sourceData</code>为文章开头给出的树状数据结构举例。这里的逻辑比较简单就不再赘述了。</p>\n","prev":{"title":"从全国金融工作会议看乐视","slug":"从全国金融工作会议看乐视"},"next":{"title":"由setTimeout深入JavaScript执行环境的异步机制","slug":"由setTimeout深入JavaScript执行环境的异步机制"},"link":"http://mickeywang.com/post/关于树形插件展示中数据结构转换的算法"}