{"title":"分支语句优化--状态模式","date":"2019-01-25T05:00:00.000Z","author":"Mikey","excerpt":"","slug":"分支语句优化-状态模式","comments":true,"tags":["JavaScript","设计模式"],"categories":["技术博客"],"updated":"2019-01-28T06:32:13.579Z","content":"<p>状态模式是一种可以极大程度上简化分支语句的行为型模式。如果代码中包含大量与对象状态有关的条件语句，这些条件语句的出现，会导致代码的可维护性和灵活性变差，不能方便地增加和删除状态。这里状态可以是OA系统中批文的流转状态，可以是订单正逆向交易过程中的各种中态，应用场景十分常见。我们可以这样定义状态模式：</p>\n<blockquote>\n<p>对象的行为依赖于它的状态（属性），并且可以根据它状态的改变产生不同的行为，从外部看好像是改变了这个对象。</p>\n</blockquote>\n<p>下面是我们常见的分支语句。对于复合状态的条件判断，其开销是翻倍的，十分不利于维护修改。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 单状态条件判断 每增加一个状态就需要添加一个判断</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo1</span> (<span class=\"params\">status</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(status === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// do sth1</span></span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(status === <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// do sth2</span></span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// do sth3</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 复合状态对条件判断的开销是翻倍的</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo2</span> (<span class=\"params\">status1, status2</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (status1 === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// do sth1</span></span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (status1 === <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// do sth2</span></span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (status1 === <span class=\"number\">1</span> &amp;&amp; status2 === <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// do sth1 and sth2</span></span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (status1 === <span class=\"number\">2</span> &amp;&amp; status2 == <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// do sth2 and sth3</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意上边复合状态所产生的行为是单个状态所产生行为的加总。下面我们用状态模式来实现多分支的逻辑。</p>\n<h2 id=\"模式实例\"><a href=\"#模式实例\" class=\"headerlink\" title=\"模式实例\"></a>模式实例</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建状态类</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo3</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 安全模式</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!(<span class=\"keyword\">this</span> <span class=\"keyword\">instanceof</span> Foo3)) <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Foo3()</span><br><span class=\"line\">\t<span class=\"comment\">// 内部状态私有变量</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> _currentStates = &#123;&#125;,</span><br><span class=\"line\">\t<span class=\"comment\">// 状态枚举容器，当然此处可以使用对象来代替</span></span><br><span class=\"line\">\tstates = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([ </span><br><span class=\"line\">\t\t[<span class=\"number\">1</span>, () =&gt; &#123;<span class=\"comment\">// do sth1&#125;], </span></span><br><span class=\"line\">\t\t[<span class=\"number\">2</span>, () =&gt; &#123;<span class=\"comment\">// do sth2&#125;], </span></span><br><span class=\"line\">\t\t[<span class=\"number\">3</span>, () =&gt; &#123;<span class=\"comment\">// do sth3&#125;], </span></span><br><span class=\"line\">\t\t[<span class=\"number\">4</span>, () =&gt; &#123;<span class=\"comment\">// do sth4&#125;], </span></span><br><span class=\"line\">\t\t[<span class=\"number\">5</span>, () =&gt; &#123;<span class=\"comment\">// do sth5&#125;], </span></span><br><span class=\"line\">\t\t[<span class=\"string\">'default'</span>, () =&gt; &#123;<span class=\"comment\">// do sth6&#125;]</span></span><br><span class=\"line\">\t])</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 状态控制类</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> Action = &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 改变状态方法 通过传递多个状态决定执行多个动作</span></span><br><span class=\"line\">\t\tchangeState: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 重置内部状态</span></span><br><span class=\"line\">\t\t\t_currentstate = args || [];</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 返回动作控制类</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t<span class=\"comment\">// 执行状态对应的动作</span></span><br><span class=\"line\">\t\tgoes: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 遍历内部保存的状态</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">of</span> _currentstate) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 如果该状态存在则执行</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">let</span> action = states.get(i) || states.get(<span class=\"string\">'default'</span>)</span><br><span class=\"line\">\t\t\t\taction.call(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 返回接口方法 change、goes</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\tchange: Action.changeState,</span><br><span class=\"line\">\t\tgoes: Action.goes</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>状态类内部除了有一个私有的状态变量，还有一个状态枚举容器，用来定义所有单一状态值的行为。这里我们使用了ES6的map，当然此你可以使用对象来代替，但是之后你会看到使用map这个新语法特性所带来的巨大灵活性。</p>\n<p>由于状态类内部需要保存当前状态，必须实例化为不同的对象使用，所以在其构造方法中加入了安全模式，即使调用方使用<code>Foo3()</code>初始化，也相当于使用了new关键字<code>new Foo3()</code>。</p>\n<p>这里我们输出了两个接口，分别是change和goes，用于改变当前实例的内部状态和执行实例中的所有状态。这样对于臃肿耦合的分支处理逻辑，便转换成以下更为清晰独立的调用方式。</p>\n<pre><code>Foo3().change(1, 2).goes().change(3).goes(); // do sth1, do sth2, do sth3\n</code></pre><p>下面我们来升级一下复合状态的复杂度，我们让多个状态所产生的行为，不再是单个状态所产生行为的简单加总了。此时应该怎么做呢？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo4</span> (<span class=\"params\">status1, status2</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (status2 === <span class=\"string\">'A'</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (status1 === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// do sth1</span></span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (status1 === <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// do sth2</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// ...</span></span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (status2 === <span class=\"string\">'B'</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (status1 === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// do sth3</span></span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (status1 === <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// do sth4</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// ...</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo5</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!(<span class=\"keyword\">this</span> <span class=\"keyword\">instanceof</span> Foo5)) <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Foo5()</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> _currentStates = &#123;&#125;,</span><br><span class=\"line\">\tstates = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([ </span><br><span class=\"line\">\t\t[<span class=\"string\">'A_1'</span>, () =&gt; &#123;<span class=\"comment\">// do sth1&#125;], </span></span><br><span class=\"line\">\t\t[<span class=\"string\">'A_2'</span>, () =&gt; &#123;<span class=\"comment\">// do sth2&#125;], </span></span><br><span class=\"line\">\t\t[<span class=\"string\">'B_1'</span>, () =&gt; &#123;<span class=\"comment\">// do sth3&#125;], </span></span><br><span class=\"line\">\t\t[<span class=\"string\">'B_2'</span>, () =&gt; &#123;<span class=\"comment\">// do sth4&#125;], </span></span><br><span class=\"line\">\t\t<span class=\"comment\">// ...</span></span><br><span class=\"line\">\t\t[<span class=\"string\">'default'</span>, () =&gt; &#123;<span class=\"comment\">// do sth5&#125;]</span></span><br><span class=\"line\">\t])</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> Action = &#123;</span><br><span class=\"line\">\t\tchangeState: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">\t\t\t_currentstate = args || [];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\tgoes: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">let</span> action = states.get(<span class=\"string\">`<span class=\"subst\">$&#123;_currentstate[<span class=\"number\">2</span>]&#125;</span>_<span class=\"subst\">$&#123;_currentstate[<span class=\"number\">1</span>]&#125;</span>`</span>) || states.get(<span class=\"string\">'default'</span>)</span><br><span class=\"line\">\t\t\taction.call(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\tchange: Action.changeState,</span><br><span class=\"line\">\t\tgoes: Action.goes</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Foo5修改的地方主要是状态枚举的map和输出的goes接口，这里巧妙的用多状态值的字符串拼接，作为map的键值，进而可以通过以下方式调用。</p>\n<pre><code>Foo4().change(1, ‘A’).goes(); // do sth1\n</code></pre><h2 id=\"取巧Map\"><a href=\"#取巧Map\" class=\"headerlink\" title=\"取巧Map\"></a>取巧Map</h2><p>接下来我们再来升级一下复杂度，证明一下map而不是object的巧妙之处。如果状态A下有多种复合状态是做相同的事，其他情况做不同的事，并且A状态下的所有复合状态都需要执行一段相同的逻辑，按照前述做法，states应该是这样的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">states = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([ </span><br><span class=\"line\">\t[<span class=\"string\">'A_1'</span>, () =&gt; &#123;<span class=\"comment\">// do sth1&#125;], </span></span><br><span class=\"line\">\t[<span class=\"string\">'A_2'</span>, () =&gt; &#123;<span class=\"comment\">// do sth1&#125;], </span></span><br><span class=\"line\">\t[<span class=\"string\">'A_3'</span>, () =&gt; &#123;<span class=\"comment\">// do sth1&#125;], </span></span><br><span class=\"line\">\t[<span class=\"string\">'A_4'</span>, () =&gt; &#123;<span class=\"comment\">// do sth2&#125;], </span></span><br><span class=\"line\">\t<span class=\"comment\">// ...</span></span><br><span class=\"line\">\t[<span class=\"string\">'common'</span>, () =&gt; &#123;<span class=\"comment\">// do common thing&#125;]</span></span><br><span class=\"line\">])</span><br></pre></td></tr></table></figure>\n<p>但如果状态规模足够大，或者键值之间的关系更加复杂多变时，map中穷举这样的实现方式也和<code>if...else</code>分支一样略显粗鄙。先来了解一下map与object的巨大差异。</p>\n<blockquote>\n<p>一个 <code>Map</code> 的键可以是<strong>任意值</strong>，包括函数、对象、基本类型、<strong>正则</strong>。</p>\n<ul>\n<li>Map 中的键值是有序的，而添加到对象中的键则不是。因此，当对它进行遍历时，Map 对象是按插入的顺序返回键值。</li>\n<li>你可以通过  <code>size</code>  属性直接获取一个  <code>Map</code> 的键值对个数，而  <code>Object</code>  的键值对个数只能手动计算。</li>\n<li><code>Map</code>  可直接进行迭代，而  <code>Object</code>  的迭代需要先获取它的键数组，然后再进行迭代。</li>\n<li><code>Object</code>  都有自己的原型，原型链上的键名有可能和你自己在对象上的设置的键名产生冲突。虽然 ES5 开始可以用 <code>map = Object.create(null)</code>  来创建一个没有原型的对象，但是这种用法不太常见。</li>\n<li><code>Map</code>  在涉及频繁增删键值对的场景下会有些性能优势。</li>\n</ul>\n</blockquote>\n<p>以上摘自MDN，我们这里用到的特性是map键可以为<strong>正则</strong>，正则的灵活性可以充分简化绝大部分复杂多变的状态关系，如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">states = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([ </span><br><span class=\"line\">\t[<span class=\"regexp\">/^A_[1-3]$/</span>, () =&gt; &#123;<span class=\"comment\">// do sth1&#125;], </span></span><br><span class=\"line\">\t[<span class=\"regexp\">/^A_4$/</span>, () =&gt; &#123;<span class=\"comment\">// do sth1&#125;], </span></span><br><span class=\"line\">\t<span class=\"comment\">// ...</span></span><br><span class=\"line\">\t[<span class=\"regexp\">/^A_.*$/</span>, () =&gt; &#123;<span class=\"comment\">// do common thing&#125;]</span></span><br><span class=\"line\">])</span><br><span class=\"line\"></span><br><span class=\"line\">goes: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 注意无法用 Map.prototype.get(key) 来获取key为正则的值，只能遍历过滤</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> states_post = [...states].filter(<span class=\"function\">(<span class=\"params\">[key, value]</span>) =&gt;</span> key.test(<span class=\"string\">`<span class=\"subst\">$&#123;_currentstate[<span class=\"number\">2</span>]&#125;</span>_<span class=\"subst\">$&#123;_currentstate[<span class=\"number\">1</span>]&#125;</span>`</span>))</span><br><span class=\"line\">\tstates_post.forEach([key, value] =&gt; value.call(<span class=\"keyword\">this</span>))</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>相信这个例子足以在今后处理复杂分支问题上，带给你诸多灵感。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>状态模式可以解决程序中臃肿的分支判断语句问题，将每个分支转化为一种状态独立出来，方便每种状态的管理又不至于每次执行时遍历所有分支。再程序中到底产出哪种行为结果，决定于选择哪种状态，而选择何种状态又是再程序运行时决定的。当然状态模式最终的目的是简化分支判断流程。</p>\n<p><em>参考文献</em></p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map\" target=\"_blank\" rel=\"noopener\">MDN—-Map</a></li>\n<li>JavaScript设计模式  张容铭</li>\n</ul>\n","prev":{"title":"纽约游记","slug":"纽约游记"},"next":{"title":"分支语句优化--策略模式","slug":"分支语句优化-策略模式"},"link":"http://mickeywang.com/post/分支语句优化-状态模式"}