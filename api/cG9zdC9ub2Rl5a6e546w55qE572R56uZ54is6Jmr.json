{"title":"node实现的网站爬虫","date":"2017-09-21T16:00:00.000Z","author":"Mikey","excerpt":"","slug":"node实现的网站爬虫","comments":true,"tags":["JavaScript","Node"],"categories":["技术博客"],"updated":"2019-01-28T06:35:12.450Z","content":"<blockquote>\n<p>本篇文章是node实现的网站爬虫这个项目的README.md，因为涉及一些项目开发过程中的问题和知识点的总结，所以在这里单独拿出分享一下。项目链接如下<a href=\"https://github.com/Mickey-Wang/crawler\" target=\"_blank\" rel=\"noopener\"><i class=\"icon-github-alt\"></i>crawler</a>。</p>\n</blockquote>\n<p>项目以抓取一个<a href=\"http://blog.sina.com.cn/u/1776757314\" target=\"_blank\" rel=\"noopener\">博客网站</a>为例，并将数据保存在MySQL数据库中，可<strong>定时更新</strong>。</p>\n<h2 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h2><ul>\n<li><strong>example</strong> 目录：本实例最终的代码</li>\n<li><strong>images</strong> 目录：文章内容用到的图片</li>\n<li><strong>snippets</strong> 目录：文章内容用到的代码片段</li>\n<li><strong>book.md</strong> 文件：文章内容</li>\n</ul>\n<h2 id=\"项目启动命令\"><a href=\"#项目启动命令\" class=\"headerlink\" title=\"项目启动命令\"></a>项目启动命令</h2><p>scripts中有两个命令：</p>\n<ul>\n<li>crawler命令为爬取网站内容到数据库</li>\n<li>server命令为带有定时功能并可展示数据（localhost:3000）的服务器程序指令</li>\n</ul>\n<h2 id=\"项目用到的相关模块\"><a href=\"#项目用到的相关模块\" class=\"headerlink\" title=\"项目用到的相关模块\"></a>项目用到的相关模块</h2><ul>\n<li>request：使用request模块来获取网页内容</li>\n<li>cheerio：是jQuery Core的子集，实现了其中绝大部分的DOM操作API，适用于服务端</li>\n<li>mysql：数据持久化到MySQL的驱动</li>\n<li>async：一个使用比较广泛的JS异步流程控制模块</li>\n<li>debug：用于打印调试信息，可通过设置环境变量来控制开发、测试、生产的信息输出<ul>\n<li>可通过cross-env进行跨平台设置，cross-env DEBUG=blog:*</li>\n<li>Windows系统在命令行下执行：set DEBUG=blog:*</li>\n<li>Linux系统在命令行下执行：export DEBUG=blog:*</li>\n</ul>\n</li>\n<li>cron：使用<a href=\"https://www.npmjs.com/package/cron\" target=\"_blank\" rel=\"noopener\">cron模块</a>来定时执行任务</li>\n</ul>\n<h2 id=\"开发过程中的难点或知识盲点\"><a href=\"#开发过程中的难点或知识盲点\" class=\"headerlink\" title=\"开发过程中的难点或知识盲点\"></a>开发过程中的难点或知识盲点</h2><ol>\n<li>JS中<a href=\"http://www.w3school.com.cn/jsref/jsref_match.asp\" target=\"_blank\" rel=\"noopener\">match</a>与<a href=\"http://www.w3school.com.cn/jsref/jsref_exec_regexp.asp\" target=\"_blank\" rel=\"noopener\">exec</a>方法的区分  </li>\n<li>npm中的cron模块的定时规则与Linux中的定时任务工具<a href=\"http://crontab.org/\" target=\"_blank\" rel=\"noopener\">crontab语法规则</a>大致相同，只是cron多了一个秒单位。具体如下：f1 f2 f3 f4 f5 f6<ul>\n<li>f1表示秒钟，f2表示分钟，f3表示小时，f4表示一个月份中的第几日，f5表示月份，f6表示一个星期中的第几天。</li>\n<li>各部分的取值含义如下（以f1部分为例，其他部分类似）：<ul>\n<li>当值为*时，表示每秒执行一次；</li>\n<li>当值为a-b时，表示从第a秒到第b秒这段时间内执行一次；</li>\n<li>当值为*/n时，表示每隔n秒执行一次；</li>\n<li>当值为a-b/n时，表示从第a秒到第b秒这段时间内每隔n秒执行一次。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>使用node内建模块child_process模块来执行文件</p>\n<ul>\n<li>child_process模块可以通过spawn()和exec()两种方法来启动一个新进程</li>\n<li><p>使用spawn()启动子进程</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> child_process = <span class=\"built_in\">require</span>(<span class=\"string\">'child_process'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// spawn()是直接运行文件的，而在Windows系统下dir命令是cmd.exe的内置命令</span></span><br><span class=\"line\"><span class=\"comment\">// 并不实际存在名为dir.exe的可执行文件，所以这里需要判断一下</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(process.platform === <span class=\"string\">'win32'</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> dir = child_process.spawn(<span class=\"string\">'cmd.exe'</span>, [<span class=\"string\">'/s'</span>, <span class=\"string\">'/c'</span>, <span class=\"string\">'dir'</span>, <span class=\"string\">'c:\\\\'</span>]);</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> dir = child_process.spawn(<span class=\"string\">'dir'</span>, [<span class=\"string\">'/'</span>]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 当子进程有输出时，自动将其输出到当前进程的标准输出流</span></span><br><span class=\"line\">dir.stdout.pipe(process.stdout);</span><br><span class=\"line\">dir.stderr.pipe(process.stderr);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 进程结束时触发close事件</span></span><br><span class=\"line\">dir.on(<span class=\"string\">'close'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">code</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'进程结束，代码=%d'</span>, code);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>使用exec()启动子进程</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> child_process = <span class=\"built_in\">require</span>(<span class=\"string\">'child_process'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 选项</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> options = &#123;</span><br><span class=\"line\">   <span class=\"comment\">// 输出缓冲区的大小，默认是200KB，如果进程的输出超过这个值，会抛出异常，并结束该进程</span></span><br><span class=\"line\">   maxBuffer: <span class=\"number\">200</span>*<span class=\"number\">1024</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> dir = child_process.exec(<span class=\"string\">'dir *'</span>,options, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, stdout, stderr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'stdout: '</span> + stdout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'stderr: '</span> + stderr);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>spawn和exec方法的区别</p>\n<ul>\n<li>spawn执行的命令必须是一个实际存在的可执行文件，而exec执行的命令则与在命令行下执行的命令一样；</li>\n<li>exec可以在回调函数中一次性返回子进程在stdout和stderr中输出的内容，但调用两者都会返回一个ChildProcess实例，通过监听其stdout和stderr属性的data事件可以获取到进程的输出；</li>\n<li>exec可以指定maxBUffer参数，默认200KB，如果子进程的输出大于这个值，将会抛出Error: stdout maxBuffer exceeded异常，并结束该子进程；</li>\n</ul>\n</li>\n<li>当执行Node.js程序时，用spawn执行node的可执行文件<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> child_process = <span class=\"built_in\">require</span>(<span class=\"string\">'child_process'</span>);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">execNodeFile</span> (<span class=\"params\">file</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> node = spawn(process.execPath, [file]);</span><br><span class=\"line\">    node.stdout.pipe(process.stdout);</span><br><span class=\"line\">    node.stderr.pipe(process.stderr);</span><br><span class=\"line\">    node.on(<span class=\"string\">'close'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">code</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'进程结束，代码=%d'</span>, code);</span><br><span class=\"line\">    &#125;);  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">execNodeFile(<span class=\"string\">'abc.js'</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>处理uncaughtException事件</strong></p>\n<ul>\n<li>大多数情况下，异步I/O操作（如本地磁盘I/O、网络I/O），所发生的错误是无法被try/catch捕获的。如果其所抛出的异常没有被捕捉到，将会导致Node.js进程直接退出。而本项目中有大量的网络I/O操作。</li>\n<li>在Node.js中，如果一个抛出的异常没有被try/catch捕获到，其会尝试将这些错误交由uncaughtException事件处理程序来处理，仅当没有注册该事件处理程序时，才会最终导致进程直接退出。因此我们在app.js的末尾做了处理。</li>\n</ul>\n</li>\n<li>使用<strong>pm2</strong>来启动程序<ul>\n<li>有时候，由于Node.js自身的BUg或者使用到第三方C++模块的缺陷而导致一些底层的错误，比如在Linux系统下偶尔会发生段错误（segment fault）导致程序崩溃，此时上面提到的处理uncaughtException事件的方法就不适用了。</li>\n<li>pm2是一个功能强大的进程管理器，通过pm2 start来启动Node.js程序，当该进程异常退出时，pm2会自动尝试重启进程，这样可以保证Node.js应用稳定运行。同时pm2还可以很方便地查看其所启动的各个进程的内存占用和日志等信息。</li>\n<li>全局安装 npm install -g pm2</li>\n<li>加入要启动的程序文件是~/app.js，在命令行下执行pmw start ~/app.js即可启动程序，执行pm2 stop ~/app.js即可停止该程序。 </li>\n</ul>\n</li>\n<li><p>对于某些使用GBK字符编码的网站，如淘宝网，因为JS内部的字符编码是使用Unicode来表示的，因此在编写爬虫来处理这些GBK编码的网页内容时还需要将其转换成UTF-8编码。</p>\n<ul>\n<li><p>比如运行下面程序来抓取一个GBK编码的网页：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> request = <span class=\"built_in\">require</span>(<span class=\"string\">'request'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> cheerio = <span class=\"built_in\">require</span>(<span class=\"string\">'cheerio'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">request(<span class=\"string\">'http://www.taobao.com/'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, res, body</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> $ = cheerio.load(body);</span><br><span class=\"line\">  <span class=\"comment\">// 执行后，输出内容时空白的，这是因为Node.js把GBK编码的网页内容当做Unicode编码来处理了。</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log($(<span class=\"string\">'head title'</span>).text());</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>第一种方法可以安装iconv-lite模块</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> request = <span class=\"built_in\">require</span>(<span class=\"string\">'request'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> cheerio = <span class=\"built_in\">require</span>(<span class=\"string\">'cheerio'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> iconv = <span class=\"built_in\">require</span>(<span class=\"string\">'iconv-lite'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">request(&#123;</span><br><span class=\"line\">   url: <span class=\"string\">'http://www.taobao.com/'</span>,</span><br><span class=\"line\">   <span class=\"comment\">// 注意，设置request抓取网页时不要对接收到的数据做任何编码转换</span></span><br><span class=\"line\">   encoding: <span class=\"literal\">null</span></span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, res, body</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"comment\">// 转换gbk编码的网页内容</span></span><br><span class=\"line\">  body = iconv.decode(body, <span class=\"string\">'gbk'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> $ = cheerio.load(body);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log($(<span class=\"string\">'head title'</span>).text());</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>第二种方法可以安装gbk模块<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> cheerio = <span class=\"built_in\">require</span>(<span class=\"string\">'cheerio'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> gbk = <span class=\"built_in\">require</span>(<span class=\"string\">'gbk'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">gbk.fetch(<span class=\"string\">'http://www.taobao.com/'</span>, <span class=\"string\">'utf-8'</span>).to(<span class=\"string\">'string'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, body</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> $ = cheerio.load(body);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log($(<span class=\"string\">'head title'</span>).text());</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n","prev":{"title":"商城“智能”导航栏实践","slug":"商城“智能”导航栏实践"},"next":{"title":"Express+MongoDB搭建多人博客","slug":"Express-MongoDB搭建多人博客"},"link":"http://mickeywang.com/post/node实现的网站爬虫"}